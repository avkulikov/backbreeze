////
/// @group mixins
////

/// Backbreeze is not a mixin library and therefor only provides two mixins intended for public use.
///
/// ## `bb-utility-class`
///
/// The `bb-utility-class` mixin is used under the hood to create all of Backbrezze' utility classes. By default it takes a property configuration map as parameter (see [property-driven variables](/configuration/#property-driven-variables)) but it can also take a `@content` block to generate classes with multiple properties. This can be practical to generate custom utility classes for your project.
///
/// ### Usage with a property configuration map:
///
/// Mandatory keys:
///
/// - `'name'`: `<String>` Defines the generated class name
/// - `'prop'`: `<String>` CSS property used
/// - `'values'`: `<Map>` Property values where each map key maps to the value name used in the class name
///
/// Optional keys:
///
/// - `'bps'`: `<Map>` If set this will generate a responsive utility classes. Typically this will be set to `$bb-bps`
/// - `'pseudo'`: `<Map>` If set this will generate pseudo selector utility classes. Typically this will be set to `$bb-pseudo`
/// - `'important'`: `<Boolean>` If set the properties will be made `!important`
///
/// #### Example:
///
/// ```scss
/// // _animation-utility.scss
///
/// @include bb-utility-class(
///   (
///     'name': 'anim',
///     'prop': 'animation-name',
///     'values': (
///       'spin': spin,
///       'pulse': pulse,
///       'none': none,
///     ),
///     'bps': $bb-bps // <- Use the general breakpoints
///   )
/// );
/// ```
///
/// ### Usage with a content block:
///
/// Mandatory keys:
///
/// - `'name'`: `<String>` Defines the generated class name
///
/// Optional keys:
///
/// - `'bps'`: `<Map>` If set this will generate a responsive utility classes. Typically this will be set to `$bb-bps`
/// - `'pseudo'`: `<Map>` If set this will generate pseudo selector utility classes. Typically this will be set to `$bb-pseudo`
///
///  @example scss - Example
///   // _embed.scss
///
///   .embed {
///     position: relative;
///
///     &::before {
///       content: '';
///       display: block;
///     }
///   }
///
///   @include bb-utility-class(
///     (
///       'name': 'embed-16\\:9',
///       'bps': $bb-bps,
///     )
///   ) {
///     &::before {
///       padding-bottom: 9 / 16 * 100%;
///     }
///   }
///
///   @include bb-utility-class(
///     (
///       'name': 'embed-4\\:3',
///       'bps': $bb-bps,
///     )
///   ) {
///     &::before {
///       padding-bottom: 3 / 4 * 100%;
///     }
///   }
///
/// @example html - Usage
///   <div class="embed embed-4:3 embed-16:9@md">
///     <iframe src="//example.com/video" frameborder="0"></iframe>
///     <!-- This embed will be 4:3 ration on mobile and 16:9 on larger screens -->
///   </div>
///
/// @parameter {Map} $config - [Property driven configuration map](/configuration/#property-driven-variables)

@mixin bb-utility-class($config) {
  $has-content: content-exists();
  @if $config {
    $no-mq: (
      '': false
    );

    $name: map-get($config, 'name');
    $prop: map-get($config, 'prop');
    $values: map-get($config, 'values');
    $pseudo: map-get($config, 'pseudo');
    $important: if(map-get($config, 'important'), ' !important', '');

    $bps: map-get($config, 'bps');
    $bps: if($bps, map-merge($no-mq, $bps), $no-mq);

    $negative: if(index($bb-negative-properties, $prop), true, false);
    $directional: if(index($bb-directional-properties, $prop), true, false);

    @if $values and $name and $prop and not $has-content {
      @each $bp-name, $bp in $bps {
        @include bb-mq($bp) {
          @include bb-utility-class-from-values(
            $name,
            $prop,
            $values,
            $negative,
            $bp-name,
            $directional,
            $important
          );

          @if $pseudo {
            @each $pseudo-class in $pseudo {
              @include bb-utility-class-from-values(
                $name,
                $prop,
                $values,
                $negative,
                $bp-name,
                $directional,
                $important,
                $pseudo-class
              );
            }
          }
        }
      }
    }

    @if $name and $has-content {
      @each $bp-name, $bp in $bps {
        @include bb-mq($bp) {
          @include bb-utility-class-from-content($name, $bp-name, $important) {
            @content;
          }

          @if $pseudo {
            @each $pseudo-class in $pseudo {
              @include bb-utility-class-from-content(
                $name,
                $bp-name,
                $important,
                $pseudo-class
              ) {
                @content;
              }
            }
          }
        }
      }
    }
  }
}

@mixin bb-utility-class-from-content(
  $name,
  $bp-name,
  $important,
  $pseudo: false
) {
  $bp-name: if(str-length($bp-name) > 0, '#{\@}#{$bp-name}', '');

  $pseudo-name: if($pseudo, '#{\:}#{$pseudo}', '');
  $pseudo: if($pseudo, ':#{$pseudo}', '');

  $parent: if($pseudo == ':group-hover', '.group:hover', '');
  $pseudo-name: if($pseudo == ':group-hover', '#{\:}group-hover', $pseudo-name);
  $pseudo: if($pseudo == ':group-hover', '', $pseudo);

  #{$parent} .#{$bb-namespace}#{$name}#{$pseudo-name}#{$bp-name}#{$pseudo} {
    @content;
  }
}

// Render helper mixin
@mixin bb-utility-class-from-values(
  $name,
  $prop,
  $values,
  $negative,
  $bp-name,
  $directional,
  $important: '',
  $pseudo: false
) {
  $bp-name: if(str-length($bp-name) > 0, '#{\@}#{$bp-name}', '');
  $name-negative: if($bb-namespace, '-#{$bb-namespace}#{$name}', '-#{$name}');

  $pseudo-name: if($pseudo, '#{\:}#{$pseudo}', '');
  $pseudo: if($pseudo, ':#{$pseudo}', '');

  $parent: if($pseudo == ':group-hover', '.group:hover', '');
  $pseudo-name: if($pseudo == ':group-hover', '#{\:}group-hover', $pseudo-name);
  $pseudo: if($pseudo == ':group-hover', '', $pseudo);

  // Directional props
  $prop-top: bb-insert-direction($prop, 'top');
  $prop-left: bb-insert-direction($prop, 'left');
  $prop-right: bb-insert-direction($prop, 'right');
  $prop-bottom: bb-insert-direction($prop, 'bottom');

  $is-border-radius: $prop == 'border-radius';

  @each $key, $val in $values {
    $key: str-replace($key, '.', '\\.');
    $key: str-replace($key, '/', '\\/');
    $key: str-replace($key, '%', '\\%');

    $negative-key: str-index($key, '-') == 1;
    $key: if(str-length($key) > 0, '-#{$key}', '');

    @if $negative-key {
      #{$parent}
        .#{$name-negative}#{str-slice($key, 2)}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop}: #{$val}#{$important};
      }
      @if $negative {
        @warn '`Value `#{str-slice($key, 2)}: #{$val}` for property `#{$prop}` is negative. Negative values for `#{$prop}` are automatically generated. Please remove `#{str-slice($key, 2)}: #{$val}` for `#{$prop}`.';
      }
    } @else {
      #{$parent}
        .#{$bb-namespace}#{$name}#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop}: #{$val}#{$important};
      }
    }

    @if $directional and not $is-border-radius {
      #{$parent}
        .#{$bb-namespace}#{$name}t#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-top}: #{$val}#{$important};
      }
      #{$parent}
        .#{$bb-namespace}#{$name}l#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-left}: #{$val}#{$important};
      }
      #{$parent}
        .#{$bb-namespace}#{$name}r#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-right}: #{$val}#{$important};
      }
      #{$parent}
        .#{$bb-namespace}#{$name}b#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-bottom}: #{$val}#{$important};
      }
      #{$parent}
        .#{$bb-namespace}#{$name}x#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-left}: #{$val}#{$important};
        #{$prop-right}: #{$val}#{$important};
      }
      #{$parent}
        .#{$bb-namespace}#{$name}y#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-top}: #{$val}#{$important};
        #{$prop-bottom}: #{$val}#{$important};
      }
    } @else if $is-border-radius {
      $prop-top-left: bb-insert-direction($prop, 'top-left');
      $prop-top-right: bb-insert-direction($prop, 'top-right');
      $prop-bottom-left: bb-insert-direction($prop, 'bottom-left');
      $prop-bottom-right: bb-insert-direction($prop, 'bottom-right');

      #{$parent}
        .#{$bb-namespace}#{$name}t#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-top-left}: #{$val}#{$important};
        #{$prop-top-right}: #{$val}#{$important};
      }
      #{$parent}
        .#{$bb-namespace}#{$name}l#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-top-left}: #{$val}#{$important};
        #{$prop-bottom-left}: #{$val}#{$important};
      }
      #{$parent}
        .#{$bb-namespace}#{$name}r#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-top-right}: #{$val}#{$important};
        #{$prop-bottom-right}: #{$val}#{$important};
      }
      #{$parent}
        .#{$bb-namespace}#{$name}b#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-bottom-left}: #{$val}#{$important};
        #{$prop-bottom-right}: #{$val}#{$important};
      }

      #{$parent}
        .#{$bb-namespace}#{$name}tl#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-top-left}: #{$val}#{$important};
      }
      #{$parent}
        .#{$bb-namespace}#{$name}tr#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-top-right}: #{$val}#{$important};
      }
      #{$parent}
        .#{$bb-namespace}#{$name}bl#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-bottom-left}: #{$val}#{$important};
      }
      #{$parent}
        .#{$bb-namespace}#{$name}br#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-bottom-right}: #{$val}#{$important};
      }
    }

    @if $negative and type-of($val) == number and not $negative-key {
      #{$parent} .#{$name-negative}#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop}: -#{$val}#{$important};
      }
    }

    @if $negative and
      $directional and
      type-of($val) ==
      number and not
      $negative-key
    {
      #{$parent}
        .#{$name-negative}t#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-top}: -#{$val}#{$important};
      }
      #{$parent}
        .#{$name-negative}l#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-left}: -#{$val}#{$important};
      }
      #{$parent}
        .#{$name-negative}b#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-bottom}: -#{$val}#{$important};
      }
      #{$parent}
        .#{$name-negative}r#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-right}: -#{$val}#{$important};
      }
      #{$parent}
        .#{$name-negative}x#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-left}: -#{$val}#{$important};
        #{$prop-right}: -#{$val}#{$important};
      }
      #{$parent}
        .#{$name-negative}y#{$key}#{$pseudo-name}#{$bp-name}#{$pseudo} {
        #{$prop-top}: -#{$val}#{$important};
        #{$prop-bottom}: -#{$val}#{$important};
      }
    }
  }
}

/// ## `bb-mq`
///
/// The `$bb-mq` mixin is a convenience mixin that allows you to reference breakpoints defined in the [global `$bb-mqs` variable](/configuration/#bb-bps) by name and thus avoid having to hardcode values or do string interpolation.
///
/// As first parameter it accepts the following:
///
/// - `<String>` Will render a `min-width` media query when matching a key in the global [`$bb-mqs`](/configuration/#bb-bps) map matching the key's value
/// - `<Strings>` Will render `@media #{<String>}`, useful for `max-width` or other complex media queries
/// - `<Number>` Will render a `min-width` media query
/// - `<Null | Boolean>` Will just render the `@content` block without a media query
///
/// The second parameter allows to define the media type and is only used when a string matching [`$bb-mqs`] map key or a number is passed.
///
/// @example scss - Example
///   // _config.scss
///   $bb-mqs: (
///     'sm': 400px,
///     'lg': 900px,
///   );
///
///   // _my-custom-module.scss
///   .my-module {
///     color: red;
///
///     @include bb-mq(false) {
///       font-size: 30px;
///     }
///
///     @include bb-mq('sm') {
///       color: purple;
///     }
///
///     @include bb-mq(600px) {
///       color: yellow;
///     }
///
///     @include bb-mq('lg', 'screen') {
///       color: blue;
///     }
///
///     @include bb-mq('screen and (max-width: #{map-get($bb-mqs, ' sm ') - 1px})') {
///       font-size: 22px;
///     }
///
///     @include bb-mq('print') {
///       color: black;
///     }
///   }
///
/// @example css - Result
///   .my-module {
///     color: red;
///     font-size: 30px;
///   }
///
///   @media all and (min-width: 400px) {
///     .my-module {
///       color: purple;
///     }
///   }
///
///   @media all and (min-width: 600px) {
///     .my-module {
///       color: yellow;
///     }
///   }
///
///   @media screen and (min-width: 900px) {
///     .my-module {
///       color: green;
///     }
///   }
///
///   @media screen and (max-width: 399px) {
///     .my-module {
///       font-size: 22px;
///     }
///   }
///
///   @media print {
///     .my-module {
///       color: black;
///     }
///   }
///
/// @parameter {String | Number | Null | Boolean} $mq - String matching a key from `$bb-mqs`, number for `min-width` media query, Arbitrary string for `@media` + string, `null` of `false` for no media query
/// @parameter {String} $media [all] - Media type

@mixin bb-mq($mq: false, $media: all) {
  @if type-of($mq) == 'number' {
    @media #{$media} and (min-width: #{$mq}) {
      @content;
    }
  } @else if type-of($mq) == 'string' {
    $general-mq: map-get($bb-bps, $mq);
    @if $general-mq {
      @media #{$media} and (min-width: #{$general-mq}) {
        @content;
      }
    } @else {
      @media #{$mq} {
        @content;
      }
    }
  } @else {
    @content;
  }
}

@function bb-insert-direction($prop, $dir) {
  $index: str-index($prop, '-');

  @if $index {
    @return str-insert($prop, '-#{$dir}', $index);
  }

  @return '#{$prop}-#{$dir}';
}

// Replace `$search` with `$replace` in `$string`
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}
